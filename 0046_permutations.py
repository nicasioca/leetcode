class Solution:
    def permute(self, nums: list) -> list:

        result = []

        # handle the empty set
        if len(nums) == 0:
            return result

        # start the recursive method
        self.get_permute(result, nums, 0)

        return result

    def get_permute(self, result: list, nums: list, index: int) -> list:

        # return list at the end
        if index == len(nums):
            result.append(list(nums))
            return

        # iterate the values over the length of the list
        for i in range(index, len(nums)):

            # swap sides as you continue to recurse down
            nums[i], nums[index] = nums[index], nums[i]

            # increment index and recursively call down
            self.get_permute(result, nums, index + 1)

            # mirror the opposite sides on the way back up
            nums[i], nums[index] = nums[index], nums[i]


if __name__ == '__main__':
    s = Solution()
    print(s.permute([1, 2, 3, 4, 5]))
    # verify output should be 120 combinations (5! * 4! * 3! * 2! * 1!)
    # Output: 
    # [
    # [1, 2, 3, 4, 5],
    # [1, 2, 3, 5, 4],
    # [1, 2, 4, 3, 5],
    # [1, 2, 4, 5, 3],
    # [1, 2, 5, 4, 3],
    # [1, 2, 5, 3, 4],
    # [1, 3, 2, 4, 5],
    # [1, 3, 2, 5, 4],
    # [1, 3, 4, 2, 5],
    # [1, 3, 4, 5, 2],
    # [1, 3, 5, 4, 2],
    # [1, 3, 5, 2, 4],
    # [1, 4, 3, 2, 5],
    # [1, 4, 3, 5, 2],
    # [1, 4, 2, 3, 5],
    # [1, 4, 2, 5, 3],
    # [1, 4, 5, 2, 3],
    # [1, 4, 5, 3, 2],
    # [1, 5, 3, 4, 2],
    # [1, 5, 3, 2, 4],
    # [1, 5, 4, 3, 2],
    # [1, 5, 4, 2, 3],
    # [1, 5, 2, 4, 3],
    # [1, 5, 2, 3, 4],
    # [2, 1, 3, 4, 5],
    # [2, 1, 3, 5, 4],
    # [2, 1, 4, 3, 5],
    # [2, 1, 4, 5, 3],
    # [2, 1, 5, 4, 3],
    # [2, 1, 5, 3, 4],
    # [2, 3, 1, 4, 5],
    # [2, 3, 1, 5, 4],
    # [2, 3, 4, 1, 5],
    # [2, 3, 4, 5, 1],
    # [2, 3, 5, 4, 1],
    # [2, 3, 5, 1, 4],
    # [2, 4, 3, 1, 5],
    # [2, 4, 3, 5, 1],
    # [2, 4, 1, 3, 5],
    # [2, 4, 1, 5, 3],
    # [2, 4, 5, 1, 3],
    # [2, 4, 5, 3, 1],
    # [2, 5, 3, 4, 1],
    # [2, 5, 3, 1, 4],
    # [2, 5, 4, 3, 1],
    # [2, 5, 4, 1, 3],
    # [2, 5, 1, 4, 3],
    # [2, 5, 1, 3, 4],
    # [3, 2, 1, 4, 5],
    # [3, 2, 1, 5, 4],
    # [3, 2, 4, 1, 5],
    # [3, 2, 4, 5, 1],
    # [3, 2, 5, 4, 1],
    # [3, 2, 5, 1, 4],
    # [3, 1, 2, 4, 5],
    # [3, 1, 2, 5, 4],
    # [3, 1, 4, 2, 5],
    # [3, 1, 4, 5, 2],
    # [3, 1, 5, 4, 2],
    # [3, 1, 5, 2, 4],
    # [3, 4, 1, 2, 5],
    # [3, 4, 1, 5, 2],
    # [3, 4, 2, 1, 5],
    # [3, 4, 2, 5, 1],
    # [3, 4, 5, 2, 1],
    # [3, 4, 5, 1, 2],
    # [3, 5, 1, 4, 2],
    # [3, 5, 1, 2, 4],
    # [3, 5, 4, 1, 2],
    # [3, 5, 4, 2, 1],
    # [3, 5, 2, 4, 1],
    # [3, 5, 2, 1, 4],
    # [4, 2, 3, 1, 5],
    # [4, 2, 3, 5, 1],
    # [4, 2, 1, 3, 5],
    # [4, 2, 1, 5, 3],
    # [4, 2, 5, 1, 3],
    # [4, 2, 5, 3, 1],
    # [4, 3, 2, 1, 5],
    # [4, 3, 2, 5, 1],
    # [4, 3, 1, 2, 5],
    # [4, 3, 1, 5, 2],
    # [4, 3, 5, 1, 2],
    # [4, 3, 5, 2, 1],
    # [4, 1, 3, 2, 5],
    # [4, 1, 3, 5, 2],
    # [4, 1, 2, 3, 5],
    # [4, 1, 2, 5, 3],
    # [4, 1, 5, 2, 3],
    # [4, 1, 5, 3, 2],
    # [4, 5, 3, 1, 2],
    # [4, 5, 3, 2, 1],
    # [4, 5, 1, 3, 2],
    # [4, 5, 1, 2, 3],
    # [4, 5, 2, 1, 3],
    # [4, 5, 2, 3, 1],
    # [5, 2, 3, 4, 1],
    # [5, 2, 3, 1, 4],
    # [5, 2, 4, 3, 1],
    # [5, 2, 4, 1, 3],
    # [5, 2, 1, 4, 3],
    # [5, 2, 1, 3, 4],
    # [5, 3, 2, 4, 1],
    # [5, 3, 2, 1, 4],
    # [5, 3, 4, 2, 1],
    # [5, 3, 4, 1, 2],
    # [5, 3, 1, 4, 2],
    # [5, 3, 1, 2, 4],
    # [5, 4, 3, 2, 1],
    # [5, 4, 3, 1, 2],
    # [5, 4, 2, 3, 1],
    # [5, 4, 2, 1, 3],
    # [5, 4, 1, 2, 3],
    # [5, 4, 1, 3, 2],
    # [5, 1, 3, 4, 2],
    # [5, 1, 3, 2, 4],
    # [5, 1, 4, 3, 2],
    # [5, 1, 4, 2, 3],
    # [5, 1, 2, 4, 3],
    # [5, 1, 2, 3, 4]
    # ]
    